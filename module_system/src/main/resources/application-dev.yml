# 系统自定义配置
autumn:
  author: mornd
  version: 1.1
  application-name: autumn-boot
  # 用户注册成功时是否发送通知邮件
  user-mail-notification: true
  # 文件存储位置 (1：本地 2：七牛云 3：阿里云oss)
  upload-storage: 1
  # 文件路径 示例（ Windows配置D:/autumn/uploadPath，Linux配置 /home/autumn/uploadPath）
  profile: 'D:/autumn/uploadPath'
  # 后端服务器ip
  server-ip: 'localhost'
  #  前端地址
  ui-base-url: 'http://localhost:9000'
  #  oa 移动端地址
  oa-ui-base-url: 'http://localhost:9002'

server:
  port: 9001
  servlet:
    session:
      timeout: 3m # session 3分钟后超时，不能小于1分钟
  tomcat:
    # tomcat的URI编码
    uri-encoding: UTF-8
    # 连接数满后的排队数，默认为100
    accept-count: 1000
    threads:
      # tomcat最大线程数，默认为200
      max: 800
      # Tomcat启动初始化的线程数，默认值10
      min-spare: 100

# 控制台输出的日志级别
#logging:
#  level:
#    root: info

swagger:
  # 是否开启swagger
  enabled: true

spring:
  application:
    name: ${autumn.application-name}
  servlet:
    multipart:
      # 最大上传单个文件大小，默认1M
      max-file-size: 50MB
      # 最大总上传的数据大小：默认10M
      max-request-size: 100MB
  datasource:
    druid:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://localhost:3306/db_autumn?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
      username: root
      password: 123456
      # 初始化大小，最小空闲连接数，最大连接池数量
      initialSize: 5
      minIdle: 5
      maxActive: 20
      # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
      maxWait: 60000
      # 每过多少秒运行一次空闲连接回收器，这里设置的是60秒
      timeBetweenEvictionRunsMillis: 60000
      # 连接保持空闲而不被驱逐的最长时间
      minEvictableIdleTimeMillis: 300000
      # 用来检测连接是否有效的sql
      validationQuery: SELECT 1 FROM DUAL
      # 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除
      testWhileIdle: true
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      testOnBorrow: false
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      testOnReturn: false
      # #是否缓存preparedStatement，即PSCache。PSCache对支持游标的数据库性能提升巨大
      poolPreparedStatements: true
      # 最大启用PSCache的数量
      maxPoolPreparedStatementPerConnectionSize: 20
      # 合并多个DruidDataSource的监控数据
      useGlobalDataSourceStat: true
      # 配置监控统计拦截的filters stat(sql监控) wall（防火墙）
      filters: stat,wall
      # SpringAOP监控
      #aop-patterns: com.mornd.*
      stat-view-servlet:
        # 开启druid的监控页功能，默认false
        enabled: true
        # 请求页面路径
        url-pattern: /druid/*
        # 监控页用户名
        login-username: admin
        # 登录页密码
        login-password: 123456
        # 是否开启重置按钮
        reset-enable: true
        # ip黑名单
        deny:
        # ip白名单（没有配置或者为空，则允许所有访问）
        allow:

      web-stat-filter:
        # 开启web应用监控功能，默认false
        enabled: true
        # 添加过滤规则
        url-pattern: /*
        # 忽略过滤格式
        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'

      # 对上面filter的详细配置
      filter:
        stat:
          enabled: true
          db-type: mysql
          # 慢sql记录 单位毫秒
          log-slow-sql: true
          slow-sql-millis: 2000
          # 打开mergeSql功能
          merge-sql: true

        wall:
          enabled: true
          db-type: mysql
          config:
            # 不允许删表
            #drop-table-allow: false
            # 不允许删除表记录
            #delete-allow: false

  #页面提交给控制器的日期格式化
  mvc:
    format:
      date: yyyy-MM-dd HH:mm:ss
  #将json返回的日期格式化
  jackson:
    date-format: yyyy-MM-dd
    #东八区，比格林威治时间早8个小时
    time-zone: GMT+8
  # redis配置
  redis:
    # 服务器地址
    host: localhost
    # 端口
    port: 6379
    # 数据库
    database: 0
    # 超时时间：毫秒
    timeout: 5000ms
    # 密码
    password:
    # 配置 lettuce 连接池
    lettuce:
      pool:
        # 最大连接数，默认8
        max-active: 5
        # 最大连接阻塞等待时间，（默认-1 没有限制）
        max-wait: 10000ms
        # 最大空闲连接，默认8
        max-idle: 10
        # 最小空闲连接，默认0
        min-idle: 5
    client-type: lettuce

  rabbitmq:
    # 用户名
    username: guest
    # 密码
    password: guest
    # 服务器地址
    host: 127.0.0.1
    # 端口
    port: 5672
    # 虚拟主机名
    virtual-host: /
    # 消息确认回调 publisher-confirm-type 类型：
    # simple：同步等待同步结果，直到超时
    # correlated：异步回调，定义ConfirmCallback，MQ返回结果时调用
    publisher-confirm-type: correlated
    # true：开启功能，需定义 ReturnCallback 回调函数
    publisher-returns: true
    template:
      # 定义消息路由失败时策略，true：调用ReturnCallback，false：直接丢弃
      mandatory: true
    # 消费者部分
    listener:
      simple:
        # manual 手动确认，手动调用 api 发送 ack
        # auto：自动确认，spring 通过 aop 检查 listener 代码是否抛出异常
        # none：关闭ack，MQ 假定消费者获取消息后会成功处理，因此消息投递后会立即删除
        acknowledge-mode: auto
        # 每次取1条，消费完才能接着去取下一条
        prefetch: 1

        retry:
          # 开启消费者消费失败重试
          enabled: true
          # 初始的失败等待时长，单位ms，默认1000ms
          initial-interval: 5000
          # 如果initial-interval: 5000,multiplier: 2,max-attempts: 5 则时间点是 1:00,1:05,1:15,1:35,2:15
          #  下次失败的等待时长倍数，下次等待时长 = multiplier + last-interval
          multiplier: 2
          # 最大重试次数
          max-attempts: 5
          # true：无状态，false：有状态，如果业务中包含事务，这里则改为 false 保留事务
          stateless: true
          # 重试的最大等待时间
          max-interval: 120000ms

  # 邮件配置
  mail:
    # 邮件服务器地址
    host: smtp.163.com
    # 端口
    port: 25
    # 协议
    protocol: smtp
    # 发送者邮箱地址
    username: xxx
    # 授权码
    password: xxx
    # 编码格式
    default-encoding: utf-8

  # 流程引擎配置
  activiti:
    # true：对所有表进行更新，表不存在，自动创建（开发使用）
    # false：数据库表不变，但版本不对或表缺失会抛出异常（默认值，生产使用）
    # create_drop：启动时创建表，关闭时删除表（必须手动关闭引擎，才能删除表，测试使用）
    # drop-create：启动时先删除旧表，然后再创建新表（不需要手动关闭引擎）使用这个参数删除所有流程表时，第一次会报表约束的错，再启动一次就可以了
    database-schema-update: true
    # 监测历史表是否存在：activities7 默认不开启历史表
    db-history-used: true
    # none：不保存任何历史数据，流程最高效
    # activity：只保存流程实例和流程行为
    # audit：除了activity，还保存全部的流程任务以及其属性，audit为history默认值
    # full：除了audit，还保存其它全部流程相关的细节数据，包括一些流程参数
    history-level: full
    # 校验流程文件，默认校验 resources 下的 process 文件夹的流程文件
    check-process-definitions: true

# mybatis-plus 配置
mybatis-plus:
  # 配 置 扫 描
  mapper-locations: classpath:/mapper/**/*.xml
  configuration:
    # 打 印 SQL 语 句
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    # 是 否 开 启 驼 峰 命 名 转 换
    map-underscore-to-camel-case: true

# JWT 属性配置
jwt:
  # JWT 存储的请求头
  tokenHeader: Authorization
  # JWT 加解密使用的密钥(盐)
  secret: 'mornd-secret'
  # JWT 负载拿到开头
  tokenHead: 'Bearer '
  # JWT 的超期限时间，单位分钟，默认值180
  expiration: 180
  # 是否是单用户登录模式
  singleLogin: true

# 七牛云配置
qiniu:
  #密钥 AK
  accessKey: xxx
  #密钥 SK
  secretKey: xxx
  #存储的空间
  bucket: xxx
  # 文件访问域名前缀
  domain: xxx

# 第三方登录
otherLogin:
  gitee:
    clientId: 'xxx'
    secret: 'xxx'
    uri: '${autumn.ui-base-url}/giteeLoginCallback'

aliyun:
  oss:
    # 地域节点
    endPoint: 'oss-cn-guangzhou.aliyuncs.com'
    accessKeyID: 'xxx'
    accessKeySecret: 'xxx'
    # 桶名称
    bucketName: 'autumn-01'

wechat:
  mp-app-id: 'xxx'
  mp-app-secret: 'xxx'
    # 授权回调获取用户信息接口地址
  user-info-url: xxx
